#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV     #3,R4                   ; Define o limite inferior da sequência
        MOV     #16,R5                  ; Define o limite superior da sequência
        CALL    #SOMATORIO
PARA
        JMP     PARA                    ; Pula para label PARA
        
/*--------------------------------------------------------------------------------------
NOME DA SUBROTINA: SOMATORIO
DESCRIÇÃO: SOMA TODOS OS NUMEROS PARES COMPREENDIDOS ENTRE UM LIMITE INFERIOR E SUPERIOR
ENTRADAS: R4 - LIMITE INFERIOR DA SEQUÊNCIA
          R5 - LIMITE SUPERIOR DA SEQUÊNCIA
SAIDAS:   R6 - RETORNA O SOMATORIO DOS NUMEROS PARES COMPREENDIDOS ENTRE OS LIMITES
INFERIOR E SUPERIOR
--------------------------------------------------------------------------------------*/
        
SOMATORIO        
        MOV     R4,R6                   ; Coloca o valor do registrador R4 no registrador R6
        
TESTE_PAR        
        SUB     #2,R6                   ; Subtrai 2 do valor do registrador R6
        CMP     #1,R6                   ; Compara o valor do registrador R6 com 1
        JHS     TESTE_IGUAL             ; Se maior ou igual pula para label TESTE_IGUAL
        JMP     SOMAR_2                 ; Pula para label SOMAR_2

TESTE_IGUAL
        JZ      TORNAR_PAR              ; Se zero pula para label TORNAR_PAR
        JMP     TESTE_PAR               ; Pula para label TESTE_PAR
        
TORNAR_PAR
        ADD     #1,R4                   ; Adiciona 1 ao valor do registrador R4
        
COMPARACAO
        MOV     R4,R6                   ; Coloca o valor do registrador R4 no registrador R6
        CMP     R5,R4                   ; Compara o valor do registrador R4 com o valor do registrador R5
        JHS     FIM                     ; Se maior ou igual pula para label FIM

SOMA
        ADD     #2,R4                   ; Adiciona 2 ao valor do registrador R4
        CMP     R5,R4                   ; Compara o valor do registrador R4 com o valor do registrador R5
        JHS     FIM                     ; Se maior ou igual pula para label FIM
        ADD     R4,R6                   ; Adiciona o valor do registrador R4 ao valor do registrador R6
        JMP     SOMA                    ; Se maior ou igual pula para label SOMA
        
SOMAR_2
        ADD     #2,R4                   ; Adiciona 2 ao valor do registrador R4
        MOV     R4,R6                   ; Coloca o valor do registrador R4 no registrador R6
        JMP     COMPARACAO              ; Se maior ou igual pula para label COMPARACAO
FIM
        RET 
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        END
